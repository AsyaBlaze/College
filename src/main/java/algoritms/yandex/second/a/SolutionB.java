package algoritms.yandex.second.a;

import java.util.Scanner;

/**
 * Ссылка: https://contest.yandex.ru/contest/28736/problems/B/
 *                                      Изобретательный Петя
 * Ограничение времени 	1 секунда
 * Ограничение памяти 	64Mb
 * Ввод 	стандартный ввод или input.txt
 * Вывод 	стандартный вывод или output.txt
 *
 * Петя нашел на чердаке старый телеграфный аппарат и приделал к нему хитроумное устройство,
 * которое может печатать на телеграфной ленте определенное слово (обозначим его X).
 * Петино устройство может напечатать на ленте это слово сколько угодно раз. Петя может заставить аппарат напечатать
 * на ленте и любое другое сообщение, но для этого ему нужно разобрать свое хитроумное устройство, и после этого он уже
 * не сможет печатать сообщение X. А самое главное, что напечатать даже один символ другого сообщения потребует от Пети больше
 * усилий, чем напечатать на ленте слово X с помощью хитроумного устройства.
 *
 * Петя хочет сделать так, чтобы всем казалось, что ему по телеграфу пришло сообщение Z. Для этого он может (строго в этой последовательности):
 * - сколько угодно раз напечатать сообщение X
 * - разобрать хитроумное устройство и посимвольно напечатать еще что-нибудь (назовем это Y)
 * - оторвать и выбросить начало ленты так, чтобы на оставшейся ленте было напечатано в точности сообщение Z
 *
 * Поскольку набирать отдельные символы сообщения Y довольно сложно, Петя хочет, чтобы в сообщении Y было как можно меньше символов.
 * Для лучшего понимания задачи смотрите примеры и пояснения к ним.
 *
 * Формат ввода:
 * В первой строке вводится слово X, которое Петя может печатать с помощью хитроумного устройства сколько угодно раз.
 * Во второй строке вводится сообщение Z, которое хочет получить Петя. Каждое сообщение состоит только из маленьких
 * латинских букв и имеет длину не более 100 символов.
 *
 * Формат вывода:
 * Выведите минимальное по длине сообщение Y, которое Пете придется допечатать вручную.
 *
 * Пример 1
 * Ввод: mama
        amamam
 * Вывод: m
 *
 * Пример 2
 * Ввод: ura
        mura
 * Вывод: mura
 *
 * Пример 3
 * Ввод: computer
        comp
 * Вывод: comp
 *
 * Пример 4
 * Ввод: ejudge
        judge
 * Вывод:
 *
 * Пример 5
 * Ввод: m
        mmm
 * Вывод:
 *
 * Примечания
 * 1. Сначала Петя два раза напечатает слово mama, потом к нему припечатает букву m,
 * а затем отрежет и выбросит три начальных символа (mam). Ответом является допечатываемая отдельно буква m.
 * 2. Казалось бы, Пете стоит сначала напечатать букву m, а затем слово ura, которое он умеет печатать.
 * Однако для того, чтобы напечатать m, ему придется разобрать свое устройство, и печатать ura ему придется также посимвольно.
 * 3. Казалось бы, Петя может напечатать слово computer, а затем отрезать и выбросить его конец — однако он не
 * может так поступить, потому что отрезать и выбросить он может только начало ленты.
 * 4. Пете достаточно один раз напечатать слово ejudge, а затем отрезать и выбросить букву e. Ничего посимвольно
 * выводить ему не придется, поэтому ответом является пустая строка.
 * 5. Достаточно трижды напечатать исходное слово и нужный результат будет получен. Ничего добавлять не надо,
 * поэтому ответ – пустая строка.
 */
public class SolutionB {
    public static void main(String[] args) {
        useTrickyDevice();
    }

    private static void useTrickyDevice() {
        Scanner scanner = new Scanner(System.in);
        String needed1 = "";
        String needed2 = "";
        String wordX = scanner.nextLine();
        String wordWanted = scanner.nextLine();
        int rsl1 = 0;
        int rsl2 = 0;
        for (int i = wordX.length(); i >= 0 ; i--) {
            if (wordX.length() - i > wordWanted.length()) continue;
            if (wordWanted.substring(0, wordX.length() - i).equals(wordX.substring(i))) {
                rsl1 += rsl1 > 0 ? 0 : wordX.substring(i).length();
                rsl2 = wordX.substring(i).length();
            }
        }
        if ((rsl1 == 0 && rsl2 == 0) || wordWanted.length() - rsl1 < wordX.length() ) {
            needed1 = wordWanted.substring(rsl1);
            rsl1 = wordWanted.length();
        }
        needed1 = getString(needed1, wordX, wordWanted, rsl1);
        needed2 = getString(needed2, wordX, wordWanted, rsl2);
        System.out.println(needed2.length() < needed1.length() ? needed2 : needed1);
    }

    private static String getString(String needed1, String wordX, String wordWanted, int rsl1) {
        while (rsl1 < wordWanted.length()) {
            if (wordWanted.length() - rsl1 >= wordX.length()) {
                String w = wordWanted.substring(rsl1, rsl1 + wordX.length());
                if (w.equals(wordX))
                    rsl1 += wordX.length();
                else {
                    needed1 = wordWanted.substring(rsl1);
                    break;
                }
            } else {
                needed1 = wordWanted.substring(rsl1);
                break;
            }
        }
        return needed1;
    }
}
